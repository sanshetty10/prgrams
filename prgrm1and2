1)class Solution {
 public:
  ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
    if (!list1 || !list2)
      return list1 ? list1 : list2;
    if (list1->val > list2->val)
      swap(list1, list2);
    list1->next = mergeTwoLists(list1->next, list2);
    return list1;
  }
};


2)#include <iostream>
struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(nullptr) {}
};
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if (!head || !head->next) return head;
        ListNode* tail = head;
        int len = 1;
        while (tail->next) {
            tail = tail->next;
            len++;
        }
        tail->next = head;
        k = k % len;
        for (int i = 0; i < len - k; i++) {
            tail = tail->next;
        }
                head = tail->next;
        tail->next = nullptr;
        
        return head;
    }
};
void printList(ListNode* head) {
    while (head) {
        std::cout << head->val << " ";
        head = head->next;
    }
    std::cout << std::endl;
}
ListNode* createList(const std::vector<int>& arr) {
    if (arr.empty()) return nullptr;
    ListNode* head = new ListNode(arr[0]);
    ListNode* curr = head;
    for (size_t i = 1; i < arr.size(); ++i) {
        curr->next = new ListNode(arr[i]);
        curr = curr->next;
    }
    return head;
}

int main() {
    Solution solution;
    ListNode* head1 = createList({1, 2, 3, 4, 5});
    ListNode* result1 = solution.rotateRight(head1, 2);
    printList(result1); // Expected output: 4 5 1 2 3
    ListNode* head2 = createList({0, 1, 2});
    ListNode* result2 = solution.rotateRight(head2, 4);
    printList(result2); // Expected output: 2 0 1

    return 0;
}
